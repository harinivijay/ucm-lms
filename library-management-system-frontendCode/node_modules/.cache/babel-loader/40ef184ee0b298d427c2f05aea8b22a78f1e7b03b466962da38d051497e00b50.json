{"ast":null,"code":"var _jsxFileName = \"/Users/harinismac/Documents/Fall 2024 Subjects/Adv DBMS/Project/library-management-system-frontend/src/pages/User/UserBookList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './UserDashboard.css'; // Assuming you have the required CSS for modal and table\n\n// const BookModal = ({ isOpen, onClose, book, onSubmit, formType, formData, setFormData }) => {\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     onSubmit(formData); // Submitting the formData to parent\n//   };\n\n//   const handleClose = () => {\n//     setFormData({\n//       firstName: \"\",\n//       lastName: \"\",\n//       studentId: \"\",\n//       reservationDate: \"\",\n//     });\n//     onClose();\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n// <div className=\"modal-overlay\">\n//   <div className=\"modal-window\">\n//     <h2 className=\"text-2xl font-semibold mb-4\">{formType} Book</h2>\n//     <p><strong>Book Name:</strong> {book.bookName}</p>\n//     <p><strong>Description:</strong> {book.description}</p>\n//     <p><strong>Author:</strong> {book.authorName}</p>\n//     <p><strong>ISBN:</strong> {book.isbnNumber}</p>\n//     <p><strong>Edition:</strong> {book.edition}</p>\n//     <p><strong>Category:</strong> {book.category}</p>\n\n//     <form onSubmit={handleSubmit} className=\"modal-form\">\n\n//           {formType === \"Reserve\" && (\n//         <div className=\"flex items-center gap-4 mb-4\">\n//           <label className=\"flex-shrink-0 font-semibold\">\n//             <strong>Reserve By Date:</strong>\n//           </label>\n//           <input\n//             type=\"date\"\n//             name=\"reservationDate\"\n//             value={formData.reservationDate}\n//             onChange={handleChange}\n//             min={new Date().toISOString().split(\"T\")[0]}\n//             max={new Date(new Date().setDate(new Date().getDate() + 14)).toISOString().split(\"T\")[0]}\n//             className=\"w-full p-2 border rounded\"\n//             required\n//           />\n//         </div>\n//       )}\n\n//       <div className=\"flex justify-between gap-4 mt-4\">\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 text-white py-2 px-4 rounded w-full sm:w-auto\"\n//         >\n//           {formType}\n//         </button>\n//         <button\n//           onClick={handleClose}\n//           className=\"bg-gray-200 text-black py-2 px-4 rounded w-full sm:w-auto\"\n//         >\n//           Close\n//         </button>\n//       </div>\n//     </form>\n//   </div>\n// </div>\n\n//   );\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserBookList = () => {\n  // const [books, setBooks] = useState([]);\n  // const [locations, setLocations] = useState([]);\n  // const [categories, setCategories] = useState([]);\n  // const [userId, setUserId] = useState(null);\n  // const [selectedLocation, setSelectedLocation] = useState(\"MIC Campus\");\n  // const [category, setCategory] = useState(\"All\");\n  // const [searchTerm, setSearchTerm] = useState(\"\");\n  // const [searchvalue, setSearchValue] = useState(\"\");\n  // const [loading, setLoading] = useState(false);\n  // const [isModalOpen, setIsModalOpen] = useState(false);\n  // const [bookForModal, setBookForModal] = useState(null);\n  // const [formType, setFormType] = useState(\"\");\n  // const [formData, setFormData] = useState({});\n\n  // const [currentPage, setCurrentPage] = useState(0);\n  // const [totalPages, setTotalPages] = useState(0);\n  // const booksPerPage = 8;\n\n  // useEffect(() => {\n  //   fetchLocations();\n  //   fetchCategories();\n  //   fetchUserId();\n  // }, []);\n\n  // useEffect(() => {\n  //   if(userId !== null) {\n  //     fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, userId);\n  //   }\n  // }, [selectedLocation, currentPage, searchTerm, category, userId]);\n\n  // const fetchLocations = async () => {\n  //   try {\n  //     const response = await axios.get(\"http://localhost:8080/lms/books/locations\");\n  //     setLocations(response.data);\n  //   } catch (error) {\n  //     console.error(\"Error fetching locations:\", error);\n  //   }\n  // };\n\n  // const fetchCategories = async () => {\n  //   try {\n  //     const response = await axios.get(\"http://localhost:8080/lms/books/categories\");\n  //     setCategories(response.data);\n  //   } catch (error) {\n  //     console.error(\"Error fetching categories:\", error);\n  //   }\n  // };\n\n  // const fetchBooks = async (location, page, searchQuery, category, userId) => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await axios.get(\n  //       `http://localhost:8080/lms/books/grouped/user`, \n  //       {\n  //         params: {\n  //           user: userId,\n  //           pageNumber:page,\n  //           size: booksPerPage,\n  //           locationFilter:location,\n  //           categoryFilter: category,\n  //           search: searchQuery, \n  //         },\n  //       }\n  //     );\n  //     setBooks(response.data.books);\n  //     setTotalPages(response.data.totalPages); // Update total pages for pagination\n  //   } catch (error) {\n  //     console.error(\"Error fetching books:\", error);\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n\n  // const fetchUserId = async () => {\n  //   const username = localStorage.getItem('username');\n  //   const type = localStorage.getItem('role');\n  //   try {\n  //       const response = await fetch(`http://localhost:8080/lms/auth/getUserId?username=${username}&type=${type}`);\n  //       const data = await response.json();\n  //       if (data.userId) {\n  //           setUserId(data.userId);\n  //           fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, data.userId);\n  //       } else {\n  //         alert('User ID not found');\n  //       }\n  //   } catch (err) {\n  //     alert('Error fetching userId');\n  //   }\n  // };\n\n  // const handleLocationChange = (e) => {\n  //   const selectedLocation = e.target.value;\n  //   setSelectedLocation(selectedLocation);\n  //   setCurrentPage(0); // Reset to first page when location changes\n  // };\n\n  // const handleSearch = (e) => {\n  //   setSearchTerm(searchvalue);\n  //   setCurrentPage(0); // Reset to the first page when a search is performed\n  // };\n\n  // const handleCategoryChange = (e) => {\n  //   setCategory(e.target.value);\n  //   setCurrentPage(0); // Reset to the first page when a search is performed\n  // };\n\n  // const openModal = (book, type) => {\n  //   setBookForModal(book);\n  //   setFormType(type);\n  //   setIsModalOpen(true);\n  // };\n\n  // const closeModal = () => {\n  //   setIsModalOpen(false);\n  //   setBookForModal(null);\n  //   setFormData({\n  //     reservationDate: \"\",\n  //   });\n  // };\n\n  // const handleCheckout = async () => {\n  //   try {\n  //     const response = await axios.get(`http://localhost:8080/lms/books/list?isbn=${bookForModal.isbnNumber}&location=${selectedLocation}`);\n  //     const availableBook = response.data.find(book => book.available); \n\n  //     if (availableBook) {\n  //       const response = await axios.post('http://localhost:8080/lms/loan-reservation/requestCheckout', null,{\n  //         params: {\n  //           bookId: availableBook.bookId,\n  //           userId: userId, \n  //         },}\n  //       );\n  //     if (response.status === 200) {\n  //       alert('Checkout Successful');\n  //       fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, userId);\n  //       setCurrentPage(currentPage);\n  //     } else {\n  //       alert('Something went wrong during checkout');\n  //     } } else {\n  //       alert('No available books for checkout');\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Checkout API error:\", error);\n  //     alert('Error during checkout. Please try again later.');\n  //   } finally {\n  //     closeModal();\n  //   }\n  // };\n\n  // const handleReservation = async (formData) => {\n  //   try {\n  //     const reservationDate = new Date(formData.reservationDate).toISOString();\n  //     const response = await axios.post('http://localhost:8080/lms/loan-reservation/requestReservation', {\n  //       isbn: bookForModal.isbnNumber,\n  //       userId: userId,\n  //       reservationDate: reservationDate,\n  //     });\n  //     if (response.status === 200) {\n  //       alert('Reservation Successful');\n  //       fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, userId);\n  //       setCurrentPage(currentPage);\n\n  //     } else {\n  //       alert('Something went wrong during reservation');\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Reservation API error:\", error);\n  //     alert('Error during reservation. Please try again later.');\n  //   } finally {\n  //     closeModal();\n  //   }\n  // };\n\n  // const handlePageChange = (newPage) => {\n  //   if (newPage >= 0 && newPage < totalPages) {\n  //     setCurrentPage(newPage);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Book List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_c = UserBookList;\nexport default UserBookList;\nvar _c;\n$RefreshReg$(_c, \"UserBookList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","UserBookList","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harinismac/Documents/Fall 2024 Subjects/Adv DBMS/Project/library-management-system-frontend/src/pages/User/UserBookList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport './UserDashboard.css'; // Assuming you have the required CSS for modal and table\n\n// const BookModal = ({ isOpen, onClose, book, onSubmit, formType, formData, setFormData }) => {\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData((prev) => ({\n//       ...prev,\n//       [name]: value,\n//     }));\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     onSubmit(formData); // Submitting the formData to parent\n//   };\n\n//   const handleClose = () => {\n//     setFormData({\n//       firstName: \"\",\n//       lastName: \"\",\n//       studentId: \"\",\n//       reservationDate: \"\",\n//     });\n//     onClose();\n//   };\n\n//   if (!isOpen) return null;\n\n//   return (\n// <div className=\"modal-overlay\">\n//   <div className=\"modal-window\">\n//     <h2 className=\"text-2xl font-semibold mb-4\">{formType} Book</h2>\n//     <p><strong>Book Name:</strong> {book.bookName}</p>\n//     <p><strong>Description:</strong> {book.description}</p>\n//     <p><strong>Author:</strong> {book.authorName}</p>\n//     <p><strong>ISBN:</strong> {book.isbnNumber}</p>\n//     <p><strong>Edition:</strong> {book.edition}</p>\n//     <p><strong>Category:</strong> {book.category}</p>\n\n//     <form onSubmit={handleSubmit} className=\"modal-form\">\n     \n//           {formType === \"Reserve\" && (\n//         <div className=\"flex items-center gap-4 mb-4\">\n//           <label className=\"flex-shrink-0 font-semibold\">\n//             <strong>Reserve By Date:</strong>\n//           </label>\n//           <input\n//             type=\"date\"\n//             name=\"reservationDate\"\n//             value={formData.reservationDate}\n//             onChange={handleChange}\n//             min={new Date().toISOString().split(\"T\")[0]}\n//             max={new Date(new Date().setDate(new Date().getDate() + 14)).toISOString().split(\"T\")[0]}\n//             className=\"w-full p-2 border rounded\"\n//             required\n//           />\n//         </div>\n//       )}\n\n//       <div className=\"flex justify-between gap-4 mt-4\">\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 text-white py-2 px-4 rounded w-full sm:w-auto\"\n//         >\n//           {formType}\n//         </button>\n//         <button\n//           onClick={handleClose}\n//           className=\"bg-gray-200 text-black py-2 px-4 rounded w-full sm:w-auto\"\n//         >\n//           Close\n//         </button>\n//       </div>\n//     </form>\n//   </div>\n// </div>\n\n//   );\n// };\n\nconst UserBookList = () => {\n  // const [books, setBooks] = useState([]);\n  // const [locations, setLocations] = useState([]);\n  // const [categories, setCategories] = useState([]);\n  // const [userId, setUserId] = useState(null);\n  // const [selectedLocation, setSelectedLocation] = useState(\"MIC Campus\");\n  // const [category, setCategory] = useState(\"All\");\n  // const [searchTerm, setSearchTerm] = useState(\"\");\n  // const [searchvalue, setSearchValue] = useState(\"\");\n  // const [loading, setLoading] = useState(false);\n  // const [isModalOpen, setIsModalOpen] = useState(false);\n  // const [bookForModal, setBookForModal] = useState(null);\n  // const [formType, setFormType] = useState(\"\");\n  // const [formData, setFormData] = useState({});\n  \n  // const [currentPage, setCurrentPage] = useState(0);\n  // const [totalPages, setTotalPages] = useState(0);\n  // const booksPerPage = 8;\n\n  // useEffect(() => {\n  //   fetchLocations();\n  //   fetchCategories();\n  //   fetchUserId();\n  // }, []);\n\n  // useEffect(() => {\n  //   if(userId !== null) {\n  //     fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, userId);\n  //   }\n  // }, [selectedLocation, currentPage, searchTerm, category, userId]);\n\n  // const fetchLocations = async () => {\n  //   try {\n  //     const response = await axios.get(\"http://localhost:8080/lms/books/locations\");\n  //     setLocations(response.data);\n  //   } catch (error) {\n  //     console.error(\"Error fetching locations:\", error);\n  //   }\n  // };\n\n  // const fetchCategories = async () => {\n  //   try {\n  //     const response = await axios.get(\"http://localhost:8080/lms/books/categories\");\n  //     setCategories(response.data);\n  //   } catch (error) {\n  //     console.error(\"Error fetching categories:\", error);\n  //   }\n  // };\n  \n  // const fetchBooks = async (location, page, searchQuery, category, userId) => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await axios.get(\n  //       `http://localhost:8080/lms/books/grouped/user`, \n  //       {\n  //         params: {\n  //           user: userId,\n  //           pageNumber:page,\n  //           size: booksPerPage,\n  //           locationFilter:location,\n  //           categoryFilter: category,\n  //           search: searchQuery, \n  //         },\n  //       }\n  //     );\n  //     setBooks(response.data.books);\n  //     setTotalPages(response.data.totalPages); // Update total pages for pagination\n  //   } catch (error) {\n  //     console.error(\"Error fetching books:\", error);\n  //   } finally {\n  //     setLoading(false);\n  //   }\n  // };\n\n  // const fetchUserId = async () => {\n  //   const username = localStorage.getItem('username');\n  //   const type = localStorage.getItem('role');\n  //   try {\n  //       const response = await fetch(`http://localhost:8080/lms/auth/getUserId?username=${username}&type=${type}`);\n  //       const data = await response.json();\n  //       if (data.userId) {\n  //           setUserId(data.userId);\n  //           fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, data.userId);\n  //       } else {\n  //         alert('User ID not found');\n  //       }\n  //   } catch (err) {\n  //     alert('Error fetching userId');\n  //   }\n  // };\n\n  // const handleLocationChange = (e) => {\n  //   const selectedLocation = e.target.value;\n  //   setSelectedLocation(selectedLocation);\n  //   setCurrentPage(0); // Reset to first page when location changes\n  // };\n\n  // const handleSearch = (e) => {\n  //   setSearchTerm(searchvalue);\n  //   setCurrentPage(0); // Reset to the first page when a search is performed\n  // };\n\n  // const handleCategoryChange = (e) => {\n  //   setCategory(e.target.value);\n  //   setCurrentPage(0); // Reset to the first page when a search is performed\n  // };\n  \n  // const openModal = (book, type) => {\n  //   setBookForModal(book);\n  //   setFormType(type);\n  //   setIsModalOpen(true);\n  // };\n\n  // const closeModal = () => {\n  //   setIsModalOpen(false);\n  //   setBookForModal(null);\n  //   setFormData({\n  //     reservationDate: \"\",\n  //   });\n  // };\n\n  // const handleCheckout = async () => {\n  //   try {\n  //     const response = await axios.get(`http://localhost:8080/lms/books/list?isbn=${bookForModal.isbnNumber}&location=${selectedLocation}`);\n  //     const availableBook = response.data.find(book => book.available); \n\n  //     if (availableBook) {\n  //       const response = await axios.post('http://localhost:8080/lms/loan-reservation/requestCheckout', null,{\n  //         params: {\n  //           bookId: availableBook.bookId,\n  //           userId: userId, \n  //         },}\n  //       );\n  //     if (response.status === 200) {\n  //       alert('Checkout Successful');\n  //       fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, userId);\n  //       setCurrentPage(currentPage);\n  //     } else {\n  //       alert('Something went wrong during checkout');\n  //     } } else {\n  //       alert('No available books for checkout');\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Checkout API error:\", error);\n  //     alert('Error during checkout. Please try again later.');\n  //   } finally {\n  //     closeModal();\n  //   }\n  // };\n\n  // const handleReservation = async (formData) => {\n  //   try {\n  //     const reservationDate = new Date(formData.reservationDate).toISOString();\n  //     const response = await axios.post('http://localhost:8080/lms/loan-reservation/requestReservation', {\n  //       isbn: bookForModal.isbnNumber,\n  //       userId: userId,\n  //       reservationDate: reservationDate,\n  //     });\n  //     if (response.status === 200) {\n  //       alert('Reservation Successful');\n  //       fetchBooks(selectedLocation, currentPage, searchTerm, category == 'All' ? null : category, userId);\n  //       setCurrentPage(currentPage);\n\n  //     } else {\n  //       alert('Something went wrong during reservation');\n  //     }\n  //   } catch (error) {\n  //     console.error(\"Reservation API error:\", error);\n  //     alert('Error during reservation. Please try again later.');\n  //   } finally {\n  //     closeModal();\n  //   }\n  // };\n\n  // const handlePageChange = (newPage) => {\n  //   if (newPage >= 0 && newPage < totalPages) {\n  //     setCurrentPage(newPage);\n  //   }\n  // };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h2>Book List</h2>\n\n    </div>\n  );\n};\n\nexport default UserBookList;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,qBAAqB,CAAC,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EACzoBACED,OAAA;IAAKE,SAAS,EAAC,uBAAuB;IAAAC,QAAA,eACpCH,OAAA;MAAAG,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEf,CAAC;AAEV,CAAC;AAACC,EAAA,GA1LIP,YAAY;AA4LlB,eAAeA,YAAY;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}